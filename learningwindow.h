#ifndef LEARNINGWINDOW_H
#define LEARNINGWINDOW_H

/**
 * @file learningwindow.h
 * @brief Header file for the learningwindow class.
 *
 * This class provides an interactive interface where users can click on PC parts to learn
 * information about them. It also allows the user to automatically assemble the PC to the correct
 * locations using the assemble and step by step features.
 *
 * @date 04/22/2025
 */

#include "testwindow.h"

#include <QMainWindow>
#include <QMap>
#include <QPropertyAnimation>

namespace Ui { class LearningWindow; }

/**
 * @class LearningWindow
 * @brief The LearningWindow class handles the learning phase of the application,
 *        where users can click on each part for information. Users can also perform
 *        an assemble demostration using the assemble or step-by-step features.
 */
class LearningWindow : public QMainWindow
{
    Q_OBJECT

public:

    /**
     * @brief Constructor for LearningWindow.
     * @param testWindow Pointer to the TestWindow for navigation.
     * @param parent Optional parent widget.
     */
    explicit LearningWindow(TestWindow* testWindow, QWidget* parent = nullptr);

    /**
     * @brief Destructor for LearningWindow.
     */
    ~LearningWindow();

    /**
     * @brief eventFilter Used to track mouse clicks on PC parts.
     * @param watched The QObject being watched for events.
     * @param event The event that occurred (mouse press)
     * @return True if the event was handled and should not continue, false otherwise.
     */
    bool eventFilter(QObject* watched, QEvent* event) override;

    /**
     * @brief animatePart Respoible for animating the part on the screen by updating the positioning
     *        sizes to the correct locations in the window.
     * @param part The part to be animated.
     * @param endPos The end position the part will animate to.
     * @param endSize The end size the part will be after animation.
     */
    void animatePart(QWidget* part, const QPoint& endPos, const QSize& endSize);

private:

    /**
     * @brief Pointer to the UI layout generated by Qt Designer.
     */
    Ui::LearningWindow* ui;

    /**
     * @brief Pointer to the testWindow to allow navigation on button press.
     */
    TestWindow* testWindow;

    /**
     * @brief originalPosSizes A map of the original postion and sizes of each PC part.
     */
    QMap<QString, QPair<QPoint, QSize>> originalPosSizes;

    /**
     * @brief previousPosSizes A map of the previous position and sizes of each PC part.
     */
    QMap<QString, QPair<QPoint, QSize>> previousPosSizes;

    /**
     * @brief stepByStepToggled Boolean to indicate the step-by-step button has been toggled or not.
     */
    bool stepByStepToggled;

    /**
     * @brief currentStep An int representing the current step in the step-by-step assemble walk through.
     */
    int currentStep;

    /**
     * @brief isAssembled Boolean to indicate if the PC is fully assembled.
     */
    bool isAssembled;

private slots:

    /**
     * @brief showInfo Creates info boxes for the parts and displays them in the window.
     * @param title The title information for the window based on PC part clicked.
     * @param text The information about the part that was clicked.
     */
    void showInfo(const QString& title, const QString& text);

    /**
     * @brief assemblePC Assembles the PC parts by defining the locations and sizes for each part.
     *        Responsible for assembling and disassembling the PC.
     */
    void assemblePC();

    /**
     * @brief onTestButtonClicked Opens the testWindow when test button is clicked.
     */
    void onTestButtonClicked();

    /**
     * @brief toggleStepByStep Arranges the parts in the window for the step-by-step feature and activates
     *          the step buttons in the window.
     */
    void toggleStepByStep();

    /**
     * @brief nextStep Animates the next PC part to the correct position on the PC.
     */
    void nextStep();

    /**
     * @brief previousStep Animates the previous PC part to its original location.
     */
    void previousStep();

};

#endif // LEARNINGWINDOW_H
