#ifndef LEARNINGWINDOW_H
#define LEARNINGWINDOW_H

/**
 * @file learningwindow.h
 *
 * @brief Header file for the LearningWindow class, which provides
 *        an educational interface to demonstrate PC component assembly.
 *
 * This file defines the structure and behavior of the LearningWindow class,
 * which includes animations, interactive popups, and the ability to toggle
 * between standard and step-by-step learning modes.
 *
 * @date 04/22/2025
 */

#include "testwindow.h"

#include <QMainWindow>
#include <QPropertyAnimation>
#include <QMap>

namespace Ui { class LearningWindow; }

/**
 * @class LearningWindow
 *
 * @brief The LearningWindow class provides an educational interface
 *        where users can learn about PC components and see how they
 *        fit together visually.
 *
 * This window supports both full assembly and step-by-step assembly
 * animations. It also allows users to transition to a test mode.
 */
class LearningWindow : public QMainWindow {
    Q_OBJECT

public:

    /**
     * @brief Constructor for LearningWindow.
     * @param testWindow Pointer to the TestWindow instance for transition.
     * @param parent Optional parent widget.
     */
    explicit LearningWindow(TestWindow* testWindow, QWidget* parent = nullptr);

    /**
     * @brief Destructor for LearningWindow.
     */
    ~LearningWindow();

    /**
     * @brief Filters events for interactive behavior such as hover or drag.
     * @param watched The object being watched.
     * @param event The event being filtered.
     * @return true if the event was handled, false otherwise.
     */
    bool eventFilter(QObject* watched, QEvent* event) override;

    /**
     * @brief Animates a PC component (widget) to a target position and size.
     * @param part The widget representing the PC part.
     * @param endPos The target position.
     * @param endSize The target size.
     */
    void animatePart(QWidget* part, const QPoint& endPos, const QSize& endSize);

private:

    /**
     * @brief Pointer to the UI layout generated by Qt Designer.
     */
    Ui::LearningWindow* ui;

    /**
     * @brief Pointer to the TestWindow to allow window transitions.
     */
    TestWindow* testWindow;

    /**
     * @brief Stores the original positions and sizes of components.
     */
    QMap<QString, QPair<QPoint, QSize>> originalPosSizes;

    /**
     * @brief Stores the previous positions and sizes of components for animation steps.
     */
    QMap<QString, QPair<QPoint, QSize>> previousPosSizes;

    /**
     * @brief Indicates whether step-by-step assembly is toggled.
     */
    bool stepByStepToggled;

    /**
     * @brief Tracks the current step in the step-by-step assembly.
     */
    int currentStep;

    /**
     * @brief Flag indicating if the PC has already been assembled.
     */
    bool isAssembled;

private slots:

    /**
     * @brief Displays a popup with information about a component.
     * @param title The title of the popup.
     * @param text The descriptive text for the popup.
     */
    void showInfo(const QString& title, const QString& text);

    /**
     * @brief Animates the full assembly of the PC.
     */
    void assemblePC();

    /**
     * @brief Transitions the user from LearningWindow to TestWindow.
     */
    void onTestButtonClicked();

    /**
     * @brief Toggles the step-by-step mode for component assembly.
     */
    void toggleStepByStep();

    /**
     * @brief Advances to the next step in step-by-step assembly.
     */
    void nextStep();

    /**
     * @brief Returns to the previous step in step-by-step assembly.
     */
    void previousStep();

};

#endif // LEARNINGWINDOW_H
