#ifndef TESTWINDOW_H
#define TESTWINDOW_H

/**
 * @file testwindow.h
 *
 * @brief Header file for the TestWindow class.
 *
 * This class provides an interactive interface where users can drag and drop PC components
 * to their correct locations to simulate building a computer. It plays audio feedback
 * based on correctness and tracks component positions for validation.
 *
 * Includes drag-and-drop event handling, snapping logic, and audio playback integration.
 *
 * @date 04/22/2025
 */

#include <QMimeData>
#include <QMainWindow>
#include <QDropEvent>
#include <QMoveEvent>
#include <QDragMoveEvent>
#include <QDrag>
#include <QPoint>
#include <QMediaPlayer>
#include <QAudioOutput>

class LearningWindow;

namespace Ui { class TestWindow; }

/**
 * @class TestWindow
 *
 * @brief The TestWindow class handles the testing phase of the application,
 *        where users can drag and drop PC components into place.
 *
 * It supports validation of component placement, audio feedback for correct
 * or incorrect answers, and manages internal logic for part positions.
 */
class TestWindow : public QMainWindow {
    Q_OBJECT

public:

    /**
     * @brief Constructor for TestWindow.
     * @param learningWindow Pointer to the LearningWindow for navigation.
     * @param parent Optional parent widget.
     */
    explicit TestWindow(LearningWindow* learningWindow, QWidget* parent = nullptr);

    /**
     * @brief Destructor for TestWindow.
     */
    ~TestWindow();

private:

    /**
     * @brief Pointer to the UI layout generated by Qt Designer.
     */
    Ui::TestWindow* ui;

    /**
     * @brief Pointer to the LearningWindow to allow navigation on button press.
     */
    LearningWindow* learningWindow;

    /**
     * @brief Stores the last known size of a dragged component.
     */
    QSize lastSize;

    /**
     * @brief Stores the name of the most recently dragged widget.
     */
    QString lastName;

    /**
     * @brief Location of the most recent drop.
     */
    QPoint location;

    /**
     * @brief List of object names that should not be moved.
     */
    QList<QString> dontMove;

    /**
     * @brief Indicates whether the UI is in a reset state.
     */
    bool reset;

    /**
     * @brief Media player for the Good! sound effect.
     */
    QMediaPlayer* goodAudio;

    /**
     * @brief Media player for the Bad! sound effect.
     */
    QMediaPlayer* badAudio;

    /**
     * @brief Media player for the Win! sound effect.
     */
    QMediaPlayer* winAudio;

    /**
     * @brief Audio output for the Win! sound effect.
     */
    QAudioOutput* winAudioOutput;

    /**
     * @brief Audio output for the Good! sound effect.
     */
    QAudioOutput* goodAudioOutput;

    /**
     * @brief Audio output for the Bad! sound effect.
     */
    QAudioOutput* badAudioOutput;

public slots:

    /**
     * @brief Receives the correctness of a user's drop action.
     * @param correctness Whether the drop was correct.
     * @param reason Text explanation of result.
     * @param part Name of the part dropped.
     * @param location Location where the part was dropped.
     */
    void receiveAnswer(bool correctness, QString reason, QString part, QPoint location);

    /**
     * @brief setLearningWindow Sets the parameter for the testWindow object.
     * @param learningWindow Parameter for the testwindow.
     */
    void setLearningWindow(LearningWindow* learningWindow);

private slots:

    /**
     * @brief Determines the snap-to-grid location based on the drop.
     * @param cursor The position of the cursor.
     * @return QPoint Snapped position.
     */
    QPoint snapLocation(QPoint cursor);

    /**
     * @brief Handles mouse press events for initiating drag.
     * @param event The mouse press event.
     */
    void mousePressEvent(QMouseEvent* event);

    /**
     * @brief Handles drop events for drag-and-drop interaction.
     * @param event The drop event.
     */
    void dropEvent(QDropEvent* event);

    /**
     * @brief Handles drag movement within the widget.
     * @param event The drag move event.
     */
    void dragMoveEvent(QDragMoveEvent* event);

    /**
     * @brief Handles drag entry events.
     * @param event The drag enter event.
     */
    void dragEnterEvent(QDragEnterEvent* event);

    /**
     * @brief onBackButtonClicked Handles the back button click to go back to the learning window.
     */
    void onBackButtonClicked();

signals:

    /**
     * @brief Emitted when a part is dropped, triggering answer checking.
     * @param part The part name.
     * @param location The location it was dropped.
     */
    void checkAnswer(QString part, QPoint location);

    /**
     * @brief Retrieves the current step (used during step-by-step test mode).
     * @return int Current step number.
     */
    int getCurrentStep();

};

#endif // TESTWINDOW_H
